CONFIGURATION:
~~~~~~~~~~~~~~

$ make config.mk
# Edit config.mk and make desired changes

COMPILE AND INSTALL:
~~~~~~~~~~~~~~~~~~~~

# First, compile libc
$ make -C ../libc

# Then choose one of the following methods:

Compile onto a Hard Drive image:
--------------------------------

  # Make a mount point
  $ sudo mkdir /mnt/quest

  # Mount the disk image:
  $ sudo mount -t ext2 -o loop,offset=32256 c.img /mnt/quest

  # Clean, compile, and install into the disk image:
  $ make clean quest && sudo make install

Or, compile onto a CD-ROM image:
--------------------------------

  # Requires the program 'mkisofs'
  $ make clean quest.iso

Or, compile for netboot:
------------------------

  # Build and install into tftp/
  $ make clean netboot

Using the emulators:
--------------------

  # Run QEMU with GDB-stub support
  $ qemu -s -smp 4 c.img

  # Or, CD-ROM image
  $ qemu -s -smp 4 -cdrom quest.iso

  # Run BOCHS
  $ bochs -q -f bochsrc-smp

  # Or, CD-ROM image
  $ bochs -q -f bochsrc-cdrom

  # Netboot
  $ qemu -boot n \
         -net nic,model=pcnet \
         -net user,tftp=tftp,bootfile=grub2pxe \
         -cdrom quest.iso
  #   the options above have the following meanings:
  #   -boot n                 Boot from Network PXE ROM
  #   -net nic,model=pcnet    Emulate a PCnet network card
  #   -net user,...           QEMU sets up a firewall with TFTP and DHCP
  #   -cdrom quest.iso        Just to have a file-system with programs...

  # QEMU with TCP serial-port for GDB-stub
  $ qemu -cdrom quest.iso -serial tcp::1234,server

INSIDE QUESTOS:
~~~~~~~~~~~~~~~

# Play Pacman! (probably broken)
> /boot/mame

# Testing fork/exec and SMP:
> /boot/test1
...
> /boot/test6

# Backspace doesn't work.  Sorry.

USING GDB-STUB SUPPORT
~~~~~~~~~~~~~~~~~~~~~~

If you are using QEMU or BOCHS with GDB-stub support then you can run gdb and
invoke commands

(gdb) file quest
(gdb) target remote localhost:1234

where localhost:1234 is the default listening port of GDB-stub.  If you put
these commands in a file .gdbinit in the current directory then gdb will run
these commands automatically when it starts.

Currently, BOCHS does not support GDB-stub AND SMP at the same time.  It has an
internal debugger that can be enabled with SMP however.  There is an
undocumented command: "set $cpu <n>" which allows you to switch processors in
the BOCHS debugger.

Examining gdb-stub packets: 
  sudo tcpdump -s 256 -i lo 'tcp port 1234 and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)' -w tcp.dump
  sudo tcpdump -X -r tcp.dump|less

